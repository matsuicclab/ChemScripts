#!/bin/bash
set -eu
SCRIPT_DIR=$(cd $(dirname $0); pwd)
source "${SCRIPT_DIR}"/abstract/files2files

function help(){
	abstract_help "xyz2xyz" "xyz" "xyz" "xyz file" "xyz file (processed)"
}

function comment_about_script(){
cat <<EOF
    Translate and rotate coordinates, remove headers, etc. for xyz files.

EOF
}

function option_help(){
cat <<EOF
    -h, -help, --help | display this help
    --eliminate-header           | eliminate the header
    --translate-geometric-center | move the origin to geometric center
    --translate-mass-center      | move the origin to mass center
    --rotation | unimplemented

EOF
}

function parse_option(){
	# set default
	eliminateHeader=false
	neworigin=original

	# parse option
	while [ "${#args[@]}" -gt 1 ]
	do
		case "${args[1]}" in
		-h | -help | --help)
			help
			exit
			# shift_args 1
			;;
		-O)
			parse_O_option
			;;
	    --eliminate-header)
	    	eliminateHeader=true
	    	shift_args 1
	    	;;
	    --translate-geometric-center)
	    	neworigin=geometric
	    	shift_args 1
	    	;;
	    --translate-mass-center)
	    	neworigin=mass
	    	shift_args 1
	    	;;
		-*)
			error "unknown option: '${args[1]}'"
			;;
		*)
			break
			;;
		esac
	done

}

function get_default_conversion_patt(){
	echo '{s/.xyz$//; s/$/.mod.xyz/}'
}

function check_xyzData_has_header(){
	# $1: xyzData
	local firstLine
	firstLine=`echo "$xyzData" | head -n 1 | sed -r 's/^ *//' | sed -r 's/ *$//'`
	if [[ "$firstLine" =~ ^[0-9]+$ ]]; then
		echo true
	else
		echo false
	fi
}

function separate_xyzData(){
	# $1: -
	# The results are stored in headerData and molData

	if `check_xyzData_has_header "$xyzData"`; then
		# extract and eliminate
		headerData=`echo "$xyzData" | head -n 2`
		molData=`echo "$xyzData" | sed -r '1,2d'`
	else
		headerData=''
		molData="$xyzData"
	fi
}

function translate_molData(){
	# $1: -
	# The results is stored in molData
	local neworiginCoord x0 y0 z0

	neworiginCoord=`echo "$molData" |
						sed -r 's/ +/ /g' |
						sed -r 's/^ //' |
						if [ "$neworigin" = geometric ]; then
							awk '{printf "1 %s %s %s\n", $2, $3, $4}'
						elif [ "$neworigin" = mass ]; then
							symb2atomnum -d ' ' -f 1
						fi |
						awk '{printf "%s %s %s %s\n", $1, $1*$2, $1*$3, $1*$4}' |
						awk '{m+=$1; mx+=$2; my+=$3; mz+=$4} END {printf "%s %s %s", mx/m, my/m, mz/m}'`
	set "$newOriginCoord"
	x0="$1"
	y0="$2"
	z0="$3"
	molData=`echo "$molData" |
				awk -v x0="$x0" -v y0="$y0" -v z0="$z0" '{printf "%s %s %s %s\n", $1, $2-x0, $3-y0, $4-z0}'`
}

function process(){
	# $1: inpFile
	#
	local xyzData headerData molData
	xyzData=`cat "$1"`

	# separate to headerData and molData
	separate_xyzData

	# translate origin
	if [ "$neworigin" = geometric ] || [ "$neworigin" = mass ]; then
		translate_molData
	fi

	# print
	if [ "$headerData" ]; then
		# print if header is not empty
		echo "$headerData"
	fi
	echo "$molData"

}

main "$@"

