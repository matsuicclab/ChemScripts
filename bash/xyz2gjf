#!/bin/bash
set -eu
SCRIPT_DIR=$(cd $(dirname $0); pwd)
source "${SCRIPT_DIR}"/abstract/files2files

function help(){
	abstract_help "xyz2gjf" "<xyz>" "<gjf>" "xyz file" "gaussian input file" "`option_help`"
}

function option_help(){
cat <<EOF
    --link0  | set the link0 command
    --route  | set the route section
    --title  | set the title section
    --charge | set charge
    --multi  | set multiplicity
             | --multi 1 / --multi 2 / ... 
             | --multi low / --multi high / --multi high2 / ... (determined from the number of electrons)
    --gen    | set basis function when gen is specified in route 
             | --gen 'H-Ar,Ga-Kr: 6-31G**' 'Fe,I,Ce: Lanl2dz'
    --ecp    | set effective core potential
             | --ecp 'Fe,I,Ce: Lanl2dz'
EOF
}

function parse_option(){
	# set default
	link0command='%LINK0%'
	routesection='%ROUTE%'
	titlesection='%TITLE%'
	charge=0
	multiplicity=
	spinstate=
	gendict=
	ecpdict=

	while [ "${#args[@]}" -gt 1 ]
	do
		case "${args[1]}" in
		-h | -help | --help)
			help
			exit
			# shift_args 1
			;;
		--link0)
			link0command="${args[2]}"
			shift_args 2
			;;
		--route)
			routesection="${args[2]}"
			shift_args 2
			;;
		--title)
			titlesection="${args[2]}"
			shift_args 2
			;;
		--charge)
			charge="${args[2]}"
			shift_args 2
			;;
		--multi)
			local __multi
			__multi="${args[2]}"
			if [[ "$__multi" =~ ^[0-9]+$ ]]; then
				multiplicity="$__multi"
			elif [ "$__multi" = low ]; then
				spinstate=0
			elif [ "$__multi" = high ]; then
				spinstate=1
			elif [[ "$__multi" =~ ^high[0-9]+$ ]]; then
				spinstate="${__multi/high/}"
			else
				error "invalid value for --multi: ${__multi}"
			fi
			shift_args 2
			;;
		--gen)
			shift_args 1
			gendict= # re-initialize
			while [[ ! "$args[1]" =~ ^-- ]];
			do
				append_to_genecp_dict gen "${args[1]}"
				shift_args 1
			done
			;;
		--ecp)
			shift_args 1
			ecpdict= # re-initialize
			while [[ ! "$args[1]" =~ ^-- ]];
			do
				append_to_genecp_dict ecp "${args[1]}"
				shift_args 1
			done
			;;
		-*)
			error "unknown option: '${args[1]}'"
			;;
		*)
			break
			;;
		esac
	done
}

function get_default_conversion_patt(){
	echo '{s/.xyz$//; s/$/.gjf/}'
}

function append_to_genecp_dict(){
	# $1: gen / ecp
	# $2: 'symblist: basis'
	local symblist basis extendedsymblist
	
	symblist=`echo "$2" | sed -r 's/:.*//'`
	basis=`echo "$2" | sed -r 's/^[^:]*://'`
	extendedsymblist=`parse_symb_list "$symblist"`
	if [ "$1" = 'gen' ]; then
		gendict="${gendict}\n${extendedsymblist}: ${basis}"
	else
		ecpdict="${ecpdict}\n${extendedsymblist}: ${basis}"
	fi
}

function parse_symb_list(){
	# $1: str
	# H-Ar,Ga-Kr,Fe,I
	# -> H,He,Li,Be,B,C,N,O,F,Ne,Na,Mg,Al,Si,P,S,Cl,Ar,Ga,Ge,As,Se,Br,Kr,Fe,I
	local str patt str2 numlist symblist
	
	str=`echo "$1" | sed -r 's/,/ /g'`
	
	patt=`echo "$str" | sed -r 's/[A-z]+/%s/g'`
	
	str2=`echo "$str" |
			sed -r 's/([- ])/\n\1\n/g' |
			sed -r -n '/[A-z]/p' |
			symb2atomnum`
	str2=`echo "$str2" |
			tr '\n' ' ' |
			xargs printf "${patt}\n"`
	
	numlist=`echo "$str2" |
				sed -r 's/ /\n/g' |
				sed -r '/-/!s/^(.+)$/\1-\1/; /^-/s/-/1-/; /-$/s/-/-118/; /-/s/-/ /1' |
				xargs -L 1 seq`
	symblist=`echo "$numlist" |
		atomnum2symb |
		tr '\n' ','`
	
	echo "$symblist"
}

function generate_genecp_section(){
	# $1: gen / ecp
	# $2: elementList
	# ex. elementList: 'C\nH\nH\nH\nO\nH'
	local dict
	if [ "$1" = "gen" ]; then
		dict="${gendict}"
	else
		dict="${ecpdict}"
	fi
	
	echo "$2" |
		sort | 
		uniq |
		while read element
		do
			basis=`echo "$dict" |
					sed -r -n "/^[^:]*${element}[^:]*:/p" |
					head -n 1 |
					sed -r 's/^[^:]*://'`
			if [ "$basis" ]; then
				echo "${element} 0"
				echo "${basis}"
				echo "****"
			else
				error "no basis setting"
			fi
		done
}

function process(){
	# $1: inpFile
	#
	local xyzData
	xyzData=`cat "$1"`

	# get coordinate from the 3rd line onwards
	coordData=`echo "$xyzData" | sed -n '3,$p'`
	# list the elements that exist
	elementList=`echo "$coordData" | cut -d ' ' -f 1`
	
	# set multiplicity
	if [ "$spinstate" ]; then
		# count the total number of electrons
		# and determine whether the number is odd or even.
		# - if even, multiplicity = 1, 3, 5, ...
		# - if odd,  multiplicity = 2, 4, 6, ...
		numElecMod2=`echo "$elementList" | symb2atomnum | awk -v c="$charge" '{s += $1} END {print (s-c)%2}'`
		
		# reset multiplicity
		multiplicity=$((2 * ${spinstate} + 1 + ${numElecMod2}))			
		
	else
		# multiplicity is already set with --multi option
		:
	fi

	# set genecp
	gensection=
	ecpsection=
	if [ "$gendict" ]; then
		gensection=`generate_genecp_section gen "${elementList}"`
	fi
	if [ "$ecpdict" ]; then
		ecpsection=`generate_genecp_section ecp "${elementList}"`
	fi
		
	# save to gjf
	# - print link0
	echo "$link0command"
	
	# - print route section
	echo "$routesection"
	
	# - print a empty line
	echo ""
	
	# - print title section
	echo "$titlesection"
	
	# - print a empty line
	echo ""
	
	# - print charge and multiplicity
	echo "${charge} ${multiplicity}"

	# - print a molecule structure
	echo "$coordData"
	
	# - print a empty line
	echo ""
	
	# - print genecp
	if [ "$gensection" ]; then
		echo "$gensection"
		echo ""
	fi
	if [ "$ecpsection" ]; then
		echo "$ecpsection"
		echo ""
		echo ""
	fi
}

main "$@"

