#!/bin/bash
set -eu
SCRIPT_DIR=$(cd $(dirname $0); pwd)
source "${SCRIPT_DIR}"/abstract/files2files

function help(){
	abstract_help "xyz2gjf" "<xyz>" "<gjf>" "xyz file" "gaussian input file" "`option_help`"
}

function option_help(){
cat <<EOF
    --link0  | set the link0 command
    --route  | set the route section
    --title  | set the title section
    --charge | set charge
    --multi  | set multiplicity
             | --multi 1 / --multi 2 / ... 
             | --multi low / --multi high / --multi high2 / ... (determined from the number of electrons)
    --gen    | set basis function when gen is specified in route 
             | --gen 'H-Ar,Ga-Kr' '6-31G**' 'Fe,I,Ce' 'Lanl2dz'
    --ecp    | set effective core potential
             | --ecp 'Fe,I,Ce' 'Lanl2dz'
EOF
}

function parse_option(){
	# set default
	link0command='%LINK0%'
	routesection='%ROUTE%'
	titlesection='%TITLE%'
	charge=0
	multiplicity=
	spinstate=
	genecp=

	while [ "${#args[@]}" -gt 1 ]
	do
		case "${args[1]}" in
		-h | -help | --help)
			help
			exit
			# shift_args 1
			;;
		--link0)
			link0command="${args[2]}"
			shift_args 2
			;;
		--route)
			routesection="${args[2]}"
			shift_args 2
			;;
		--title)
			titlesection="${args[2]}"
			shift_args 2
			;;
		--charge)
			charge="${args[2]}"
			shift_args 2
			;;
		--multi)
			local __multi
			__multi="${args[2]}"
			if [[ "$__multi" =~ ^[0-9]+$ ]]; then
				multiplicity="$__multi"
			elif [ "$__multi" = low ]; then
				spinstate=0
			elif [ "$__multi" = high ]; then
				spinstate=1
			elif [[ "$__multi" =~ ^high[0-9]+$ ]]; then
				spinstate="${__multi/high/}"
			else
				error "invalid value for --multi: ${__multi}"
			fi
			shift_args 2
			;;
		--genecp)
			# TODO
		
			shift_args 2
			;;
		-*)
			error "unknown option: '${args[1]}'"
			;;
		*)
			break
			;;
		esac
	done
}

function get_default_conversion_patt(){
	echo '{s/.xyz$//; s/$/.gjf/}'
}

function process(){
	# $1: inpFile
	#
	local xyzData
	xyzData=`cat "$1"`

	# get coordinate from the 3rd line onwards
	coordData=`echo "$xyzData" | sed -n '3,$p'`
	# list the elements that exist
	elementList=`echo "$coordData" | cut -d ' ' -f 1`
	uniqElementList=`echo "$elementList" | sort | uniq`
	
	# set multiplicity
	if [ "$spinstate" ]; then
		# count the total number of electrons
		# and determine whether the number is odd or even.
		# - if even, multiplicity = 1, 3, 5, ...
		# - if odd,  multiplicity = 2, 4, 6, ...
		numElecMod2=`echo "$elementList" | symb2atomnum | awk -v c="$charge" '{s += $1} END {print (s-c)%2}'`
		
		# reset multiplicity
		multiplicity=$((2 * ${spinstate} + 1 + ${numElecMod2}))			
		
	else
		# multiplicity is already set with --multi option
		:
	fi

	# set genecp
	
	# save to gjf
	# - print link0
	echo "$link0command"
	
	# - print route section
	echo "$routesection"
	
	# - print a empty line
	echo ""
	
	# - print title section
	echo "$titlesection"
	
	# - print a empty line
	echo ""
	
	# - print charge and multiplicity
	echo "${charge} ${multiplicity}"

	# - print a molecule structure
	echo "$coordData"
	
	# - print a empty line
	echo ""
	
	# - print genecp
	# TODO implement
}

main "$@"

