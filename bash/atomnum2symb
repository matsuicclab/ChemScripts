#!/bin/bash

set -eu
SCRIPT_DIR=$(cd $(dirname $0); pwd)
source "${SCRIPT_DIR}"/abstract/str2str

function help(){
	abstract_help "atomnum2symb" "num" "symb" "atomic number" "element symbol"
}

function option_help(){
cat <<EOF
    -h, -help, --help | display this help
    -d, --delimiter <delimiter> | set delimiter
                                | default: ' '
    -f, --field <num>           | set target column number
                                | default: 1
    -s, --skip <num>            | set the title section
                                | default: 0

EOF
}

function parse_option(){
	# set default
	delimiter=' '
	targetColumnNum=1
	headerEndLineNum=0
	reverse=false

	while [ "${#args[@]}" -gt 1 ]
	do
		case "${args[1]}" in
		-h | -help | --help)
			help
			exit
			# shift_args 1
			;;
		-d | --delimiter)
			delimiter="${args[2]}"
			shift_args 2
			;;
		-f | --field)
			targetColumnNum="${args[2]}"
			shift_args 2
			;;
		-s | --skip)
			headerEndLineNum="${args[2]}"
			shift_args 2
			;;
		-r | --reverse)
			reverse=true
			shift_args 1
			;;
		-*)
			error "unknown option: '${args[1]}'"
			;;
		*)
			break
			;;
		esac
	done
}

function printConversionTable(){
cat <<EOF
1 H
2 He
3 Li
4 Be
5 B
6 C
7 N
8 O
9 F
10 Ne
11 Na
12 Mg
13 Al
14 Si
15 P
16 S
17 Cl
18 Ar
19 K
20 Ca
21 Sc
22 Ti
23 V
24 Cr
25 Mn
26 Fe
27 Co
28 Ni
29 Cu
30 Zn
31 Ga
32 Ge
33 As
34 Se
35 Br
36 Kr
37 Rb
38 Sr
39 Y
40 Zr
41 Nb
42 Mo
43 Tc
44 Ru
45 Rh
46 Pd
47 Ag
48 Cd
49 In
50 Sn
51 Sb
52 Te
53 I
54 Xe
55 Cs
56 Ba
57 La
58 Ce
59 Pr
60 Nd
61 Pm
62 Sm
63 Eu
64 Gd
65 Tb
66 Dy
67 Ho
68 Er
69 Tm
70 Yb
71 Lu
72 Hf
73 Ta
74 W
75 Re
76 Os
77 Ir
78 Pt
79 Au
80 Hg
81 Tl
82 Pb
83 Bi
84 Po
85 At
86 Rn
87 Fr
88 Ra
89 Ac
90 Th
91 Pa
92 U
93 Np
94 Pu
95 Am
96 Cm
97 Bk
98 Cf
99 Es
100 Fm
101 Md
102 No
103 Lr
104 Rf
105 Db
106 Sg
107 Bh
108 Hs
109 Mt
110 Ds
111 Rg
112 Cn
113 Nh
114 Fl
115 Mc
116 Lv
117 Ts
118 Og
EOF
}


function process(){
	# $1: inpStr
	#
	local inpStr
	inpStr="$1"

	#-------------------------------------------------------
	if "$reverse"; then
		# valid characters to convert from
		legalCharPatt="[A-z]"
		# prepare sed cmd
		# s/^H,$/1,/; s/^He,$/2,/; s/^Li,$/3,/; ... (delimiter: ',')
		sedcmd=`printConversionTable |
					awk -v d="$delimiter" '{printf "s/^%s%s$/%s%s/; ", $2, d, $1, d }'`
		sedcmd2='y/nubtqphsoe/0123456789/; y/NUBTQPHSOE/0123456789/'

	else
		# valid characters to convert from
		legalCharPatt="[0-9]"
		# prepare sed cmd
		# s/^1,$/H,/; s/^2,$/He,/; s/^3,$/Li,/; ... (delimiter: ',')
		sedcmd=`printConversionTable |
					awk -v d="$delimiter" '{printf "s/^%s%s$/%s%s/; ", $1, d, $2, d }'`
		sedcmd2='s/^0/N/; s/^1/U/; s/^2/B/; s/^3/T/; s/^4/Q/; s/^5/P/; s/^6/H/; s/^7/S/; s/^8/O/; s/^9/E/; y/0123456789/nubtqphsoe/'

	fi

	#-------------------------------------------------------
	# extract header part
	if [ "$headerEndLineNum" -eq 0 ]; then
		headerData=
	else
		headerData=`echo "$inpStr" | sed -n "1,${headerEndLineNum}p"`
	fi

	# get the number of the line after the line where the header ends
	contentStartLineNum=$(($headerEndLineNum + 1))
	# extract content part
	contentData=`echo "$inpStr" | sed -n "${contentStartLineNum},"'$p'`

	#-------------------------------------------------------
	# conversion outline:
	# A, B, 2, C, D
	# E, F, 10, G, H
	# ...
	# ->
	# ,A, B, 2, C, D,
	# ,E, F, 10, G, H,
	# ...
	# ->
	# ,A, B,
	# 2,
	# C, D,
	# ,E, F,
	# 10,
	# G, H,
	# ...
	# ->
	# ,A, B,
	# He,
	# C, D,
	# ,E, F,
	# Ne,
	# G, H,
	# ...
	# ->
	# ,A, B, He, C, D,
	# ,E, F, Ne, G, H,
	# ...
	contentData=`echo "$contentData" |
			sed -r 's/$/'"${delimiter}"'/' | # add trailing and leading delimiters
			sed -r 's/^/'"${delimiter}"'/' |
			sed -r "s/${delimiter}/${delimiter}\n/${targetColumnNum}" | # split 1 line into 3 lines
			sed -r "2~2s/${delimiter}/${delimiter}\n/1" |
			sed -r '$s/$/\n /'`
			# Since bash removes the trailing newline character when assigning to a variable,
			# consider the case where the last line is an empty character
			# and add a trailing space character

	#-------------------------------------------------------
	# check if it doesn't contain characters that can't be converted
	targetData=`echo "$contentData" |
			sed -r -n '2~3p' |
			sed -r "s/${delimiter}"'$//'`
	illegalContentLineNum=`echo "$targetData" |
				sed -r "s/${legalCharPatt}//g" |
				nl -b a | # print line number
				sed -r '/^ +[0-9]+\t$/d' |
					# remove lines that contained only normal characters
					# this '[0-9]' represents the line number printed by nl, so it has nothing to do with legalCharPatt
				sed -r -n 1p | # get line number
				sed -r 's/ //g' |
				sed -r 's/\t.+//'`
	if [ ! -z "$illegalContentLineNum" ] && [ "$illegalContentLineNum" -gt 0 ]; then
		# if $illegalContentLineNum is not empty and is greater than 0
		illegalString=`echo "$targetData" |
						sed -n "${illegalContentLineNum}p"`
		illegalLineNum=$(($illegalContentLineNum + $headerEndLineNum))
		error "illegal string: line ${illegalLineNum}: ${illegalString}"
	fi

	# ------------------------------------------------------------------
	# convert and print
	if [ ! -z "$headerData" ]; then
		# if $headerData is not empty
		echo "$headerData"
	fi

	echo "$contentData" |
		sed -r "2~3{${sedcmd}; ${sedcmd2};}" | # convert num to symb
		sed -r '{N;N;s/\n//g}' | # restore to original shape
		sed -r 's/^'"${delimiter}"'//' |
		sed -r 's/'"${delimiter}"'$//' |
		sed -r '$d'

}

main "$@"



