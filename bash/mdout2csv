#!/bin/bash

set -eu
SCRIPT_DIR=$(cd $(dirname $0); pwd)
source "${SCRIPT_DIR}"/abstract/files2files

function help(){
	abstract_help "mdout2csv" "<mdout>" "<csv>" "Amber output file" "csv file" ""
}

function parse_option(){
	while [ "${#args[@]}" -gt 1 ]
	do
		case "${args[1]}" in
		-h | -help | --help)
			help
			exit
			# shift_args 1
			;;
		-*)
			error "unknown option: '${args[1]}'"
			;;
		*)
			break
			;;
		esac
	done
}

function get_default_conversion_patt(){
	echo '{s/$/.csv/}'
}

function process(){
	# $1: inpFile
	#
	#
	local mdoutFile="$1"
	# extract mdout data for csv
	local mdoutData=`cat "$mdoutFile" |
				sed -r -n '/NSTEP.+TIME/,$p' |
				sed -r '/A V E R A G E S/,$d' |
				grep -e ' = ' -e '-----' |
				tr '\n' ' ' |
				sed -r 's/-----+/\n/g' |
				sed -r 's/^/  /'`

	# extract column names
	# extract by focusing on equals and whitespace characters
	local columnNames=`echo "$mdoutData" |
					sed -r 's/ += +[^ ]+ +/,/g' |
					sed -r 's/^ +//' |
					sed -r 's/,$//' |
					uniq`
	# extract numerical data
	local data=`echo "$mdoutData" |
					sed -r 's/  [^=]+= +/,/g' |
					sed -r 's/^,//'`

	local numLineColumnNames=`echo "$columnNames" | wc -l`
	if [ ! "$numLineColumnNames" -eq 1 ]; then
		# warning
		warning "mdout2csv: columnNames may not be uniquely determined"
	fi

	# ------------------------------------------------------------------
	# print

	echo "$columnNames"
	echo "$data"
}

main "$@"

